<h3 class="modal-section-title"><%- gettext('Release Date and Time') %></h3>
<div class="modal-section-content has-actions">
    <ul class="list-fields list-input datepair">
        <li class="field field-text field-start-date field-release-date">
            <label for="start_date" class="label"><%- gettext('Release Date:') %></label>
            <input type="text" id="start_date" name="start_date"
              value=""
              placeholder="MM/DD/YYYY" class="start-date release-date date input input-text" autocomplete="off" />
        </li>
        <li class="field field-text field-start-time field-release-time">
            <label for="start_time" class="label"><%- gettext('Release Time in UTC:') %></label>
            <input type="text" id="start_time" name="start_time"
              value=""
              placeholder="HH:MM" class="start-time release-time time input input-text" autocomplete="off" />
        </li>
    </ul>

    <% if (xblockInfo.isSequential()) { %>
      <ul class="list-actions">
          <li class="action-item">
              <a href="#" data-tooltip="<%- gettext('Clear Release Date/Time') %>" class="clear-date action-button action-clear">
                  <span class="icon fa fa-undo" aria-hidden="true"></span>
                  <span class="sr"><%- gettext('Clear Release Date/Time') %></span>
              </a>
          </li>
      </ul>
    <% } %>
</div>
<div style='padding-bottom:10px'>
    <form >
        <div>
         <input type="hidden" id="csrf_token" name="csrfmiddlewaretoken"  />
            <h3 class="modal-section-title">
            Sub Text 
            </h3>
            <textarea id='sub-text' style="width:100% ; height:150px"></textarea>
            <div>
                <a style='font-size:18px;cursor: pointer;' id='sub-text-submit' hrfe='#' class='button action-cancel' >
                Save Sub Text
                </a>
               
            </div>
        </div>
    </form>
</div>

<script>
    const sequenceId = document.querySelector('.xblock-editor').getAttribute('data-locator')
    const subTextElement = document.querySelector('#sub-text')
    const btnSubmit = document.querySelector('#sub-text-submit')

    async function fetchData (){
        try{
            const response = await fetch ('/api/sub_text/' + sequenceId)
            if(!response.ok){
                throw new Error('error')
            }
            const data =await response.json()
            subTextElement.value = data.sub_text
            console.log(data)

        }   
        catch (error){
            console.log(error)
        }
    }
    
    fetchData()

    function getCookie(cookieName) {
    const name = cookieName + "=";
    const decodedCookie = decodeURIComponent(document.cookie);
    const cookieArray = decodedCookie.split(';');
    for (let i = 0; i < cookieArray.length; i++) {
        let cookie = cookieArray[i];
        while (cookie.charAt(0) === ' ') {
        cookie = cookie.substring(1);
        }
        if (cookie.indexOf(name) === 0) {
        return cookie.substring(name.length, cookie.length);
        }
    }
    return null; 
    }



    btnSubmit.addEventListener('click', async (e) =>{
        
         try{
            const csrftoken = getCookie('csrftoken')
            const textareaValue = subTextElement.value
            const url = window.location.href
            const parts = url.split('/')
            const courseId = parts[parts.length -1]
            console.log(courseId)
            const response = await fetch('/api/set_sub_text', {
                method : 'POST',
                headers: {
                'Content-Type': 'application/json',
                 'X-CSRFToken': csrftoken
            },
            body: JSON.stringify({ subtext: textareaValue  , suquence_id: sequenceId , courseId:courseId}) 
            })
        }
        catch(error){
            console.log(error)
        }
       
    })
</script>